---
title: "Wind Power & Energy Yield Forecast"
subtitle: Forecast Horizon Seven (07) days ahead
author: "Jorge A. Thomas"
date: "`r Sys.Date()`"
format:    
    html:
      self-contained: true
      code-fold: true
      df-print: tibble
      code-summary: "Show the code"
      grid: 
        margin-width: 350px
execute: 
  echo: fenced
reference-location: margin # margin
citation-location: document

---

Wind power and on-site energy forecast for **one Goldwind turbine model GW 165-6.0 6300**

## Location and Site Assessment

```{r}
#| label: initialisation
#| message: false
#| echo: false

# ======================== Wind-Energy-Yield-Forecast =========================
# June 2024
# @jorgethomasm

# ========================== Load Dependencies ==========================

# 1.1. Used Libraries:

my_packages <- c("ggplot2",    # graphical library
                 "reticulate",    
                 "dplyr",  
                 "tibble", 
                 "lubridate", 
                 "kableExtra", 
                 "xts" 
                 ) 

# "pals"     # more colour palettes
# "ggthemes" # more colour palettes

# 1.2. Install packages ---------------------

my_installed_packages <- my_packages %in% rownames(installed.packages())

if (any(my_installed_packages == FALSE)) install.packages(my_packages[!my_installed_packages])

# 1.3. Load Packages  ----------------------

invisible(lapply(my_packages, library, character.only = TRUE))

remove("my_packages", "my_installed_packages")

source("./R/jthomfuncs.r")
theme_set(jthomggtheme)

source("./R/jthomfuncs_wind.r")
```


```{python}
#| label: request
#| message: false
#| echo: false

# Initialise libraries

import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = 3600)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://api.open-meteo.com/v1/dwd-icon"
params = {
	"latitude": 53.88,
	"longitude": 7.40,
	"hourly": ["relative_humidity_2m", "surface_pressure", "wind_speed_120m", "temperature_120m"],
	"wind_speed_unit": "ms",
	"timeformat": "unixtime"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_relative_humidity_2m = hourly.Variables(0).ValuesAsNumpy()
hourly_surface_pressure = hourly.Variables(1).ValuesAsNumpy()
hourly_wind_speed_120m = hourly.Variables(2).ValuesAsNumpy()
hourly_temperature_120m = hourly.Variables(3).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
	start = pd.to_datetime(hourly.Time(), unit = "s", utc = True),
	end = pd.to_datetime(hourly.TimeEnd(), unit = "s", utc = True),
	freq = pd.Timedelta(seconds = hourly.Interval()),
	inclusive = "left"
)}
hourly_data["relative_humidity_2m"] = hourly_relative_humidity_2m
hourly_data["surface_pressure"] = hourly_surface_pressure
hourly_data["wind_speed_120m"] = hourly_wind_speed_120m
hourly_data["temperature_120m"] = hourly_temperature_120m

hourly_dataframe = pd.DataFrame(data = hourly_data)

```

::: {#fig-intro layout-ncol="2"}
![Source: Google Earth](./images/wt_location.png){width="73%"}

![GW 165-6.0 6300](./images/Goldwind_GW165-60.jpg){width="27%"}

Site and turbine model
:::

```{r}
#| label: calculations
#| message: false
#| echo: false

hourly_df <- py$hourly_dataframe
save(hourly_df, file = "./data/last_update_weather.Rdata")

#load("./data/last_update_weather.Rdata")

# ====== Wind Turbine Specs ======

# Manufacturer: Goldwin
# Model: GW 165-6.0 6300 

# Variable Speed - Variable pitch

wt_rated_power <- 6000 #  [kW]
wt_rated_wind_speed <- 11.4 # [m/s] at standard air density
wt_area <- 21382 # squared metres
wt_hub_height <- 100 # metres
Cp <- 0.45 # Power Coefficient
wt_rotor_diam <- 165 # metres

wt_ws_cut_in <- 3 # m/s
wt_ws_cut_out <- 24 # m/s

# Speed Range During Power Production
wt_min_speed <- 5.5  # [RPM]
wt_max_speed <- 10.7  # [RPM] Nominal

#' Tip speed of blade 
#' Linear speed of blade tip for Tip-Speed Ratio (lambda) calc.
wt_min_tip_speed <- 2*pi * (wt_min_speed/60) * (wt_rotor_diam/2) # [m/s]
wt_max_tip_speed <- 2*pi * (wt_max_speed/60) * (wt_rotor_diam/2) # [m/s] Nominal

# wt_max_tip_speed <- 92 # [m/s] # From Specs.

# ====== Onshore Wind Park =======

n_wind_turbines <- 1
installed_capacity <- (n_wind_turbines * wt_rated_power) / 1000 # [MW]


 # Lat =  53°52'44.10"N
 # Lon =   7°24'28.35"E


# ====== Power & Energy Calculations =======

# Add calculations:

hourly_df <-
	hourly_df |>
  mutate(date =  lubridate::with_tz(date, "UTC")) |> 
	mutate(rho_h = calc_humid_air_density(temperature_120m, relative_humidity_2m/100, surface_pressure)) |>
  mutate(p_out = calc_wt_output_power(rated_power = wt_rated_power,
                                        area = wt_area,
                                        power_coeff = Cp,
                                        cut_in = wt_ws_cut_in,
                                        cut_out = wt_ws_cut_out,
                                        air_density = rho_h,
                                        wind_speed = wind_speed_120m)) 

# To XTS

hourly_xts <- xts::xts(hourly_df[, 6:ncol(hourly_df)], as.POSIXct(hourly_df$date, tz = "UTC"))

ends <- xts::endpoints(hourly_xts, "days")
#ends <- ends + 1
#ends[length(ends)] <- ends[length(ends)] - 1

```


## Forecasted Generated Power by the Wind Turbine
```{r}
#| label: plots
#| echo: false
#| fig-width: 11
#| fig-height: 4
#| column: page-right
#| warning: false

pl_power <- ggplot(hourly_df, aes(x=date, y=p_out)) +

  geom_line(colour = "red") + geom_point(colour = "red") +
  labs(title = strftime(Sys.Date(), format = "%Y", tz = "UTC") ,y="[kW]", x="UTC", caption = "Forecast Horizon: 7 days ahead.") +
  scale_x_datetime(date_breaks = "1 day", date_minor_breaks = "2 hour", expand = c(0, 0), date_labels = "%d.%b")

pl_power

```

## Daily Forecasted Energy Yield of the Wind Turbine

```{r}
#| label: daily_energy
#| echo: false
#| message: false
#| fig-width: 11
#| fig-height: 4
#| column: page-right
#| warning: false

daily_xts <-  xts::period.apply(hourly_xts, ends, sum)

daily_df <- 
    daily_xts |>
    as_tibble() |>
    mutate(datetime = as.Date(time(daily_xts), tz = "UTC")) |>
    mutate(MWh = V1/1000) |>
    relocate(datetime) 
    
    # |>
    # slice(2:(n()-1)) 

ggplot(daily_df, aes(x=datetime, y=MWh)) +
  geom_col(alpha = 0.6, fill="blue") + 
  labs(y = "[MWh]", x="Days Ahead", caption = "Forecast Horizon: 7 days ahead.") +
  geom_text(aes(label = round(MWh, 2)), vjust = -0.2) +
  scale_x_date(date_breaks = "1 day", date_minor_breaks = "1 day", expand = c(0, 0), date_labels = "%d.%m.%Y")

```

#### Requested Weather Variables (DWD ICON)

- relative_humidity_2m \[%\]
- surface_pressure \[hPa\] 
- wind_speed_120m \[m/s\] 
- temperature_120m \[°C\]

#### Tech Stack

- Quarto
- Python
- Open Meteo
- Numeric Weather Prediction (NWP): DWD ICON
- R
- ggplot
- plotly