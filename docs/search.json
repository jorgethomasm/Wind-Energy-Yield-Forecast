[
  {
    "objectID": "Wind-Energy-Yield-Forecast.html",
    "href": "Wind-Energy-Yield-Forecast.html",
    "title": "Wind Power & Energy Yield Forecast",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\n\nsource(\"init.R\")\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\n\nAttaching package: 'kableExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\n\nprint(\"test\")\n\ntest\n\n\n\n# Initialise libraries\n\nimport openmeteo_requests\nimport requests_cache\nimport pandas as pd\nfrom retry_requests import retry\n\n# Setup the Open-Meteo API client with cache and retry on error\ncache_session = requests_cache.CachedSession('.cache', expire_after = 3600)\nretry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)\nopenmeteo = openmeteo_requests.Client(session = retry_session)\n\n# Make sure all required weather variables are listed here\n# The order of variables in hourly or daily is important to assign them correctly below\nurl = \"https://api.open-meteo.com/v1/dwd-icon\"\nparams = {\n    \"latitude\": 52.52,\n    \"longitude\": 13.41,\n    \"hourly\": [\"relative_humidity_2m\", \"surface_pressure\", \"wind_speed_120m\", \"temperature_120m\"],\n    \"wind_speed_unit\": \"ms\",\n    \"timeformat\": \"unixtime\"\n}\nresponses = openmeteo.weather_api(url, params=params)\n\n# Process first location. Add a for-loop for multiple locations or weather models\nresponse = responses[0]\nprint(f\"Coordinates {response.Latitude()}°N {response.Longitude()}°E\")\n\nCoordinates 52.52000045776367°N 13.419998168945312°E\n\nprint(f\"Elevation {response.Elevation()} m asl\")\n\nElevation 38.0 m asl\n\nprint(f\"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}\")\n\nTimezone None None\n\nprint(f\"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s\")\n\nTimezone difference to GMT+0 0 s\n\n\n# Process hourly data. The order of variables needs to be the same as requested.\nhourly = response.Hourly()\nhourly_relative_humidity_2m = hourly.Variables(0).ValuesAsNumpy()\nhourly_surface_pressure = hourly.Variables(1).ValuesAsNumpy()\nhourly_wind_speed_120m = hourly.Variables(2).ValuesAsNumpy()\nhourly_temperature_120m = hourly.Variables(3).ValuesAsNumpy()\n\nhourly_data = {\"date\": pd.date_range(\n    start = pd.to_datetime(hourly.Time(), unit = \"s\", utc = True),\n    end = pd.to_datetime(hourly.TimeEnd(), unit = \"s\", utc = True),\n    freq = pd.Timedelta(seconds = hourly.Interval()),\n    inclusive = \"left\"\n)}\nhourly_data[\"relative_humidity_2m\"] = hourly_relative_humidity_2m\nhourly_data[\"surface_pressure\"] = hourly_surface_pressure\nhourly_data[\"wind_speed_120m\"] = hourly_wind_speed_120m\nhourly_data[\"temperature_120m\"] = hourly_temperature_120m\n\nhourly_dataframe = pd.DataFrame(data = hourly_data)\n# print(hourly_dataframe)\n\n\nhourly_df &lt;- py$hourly_dataframe\n\nhead(hourly_df)\n\n                 date relative_humidity_2m surface_pressure wind_speed_120m\n1 2024-06-08 02:00:00                   87         1011.869        4.004997\n2 2024-06-08 03:00:00                   85         1011.859        4.720170\n3 2024-06-08 04:00:00                   85         1011.652        5.622277\n4 2024-06-08 05:00:00                   88         1011.245        5.560575\n5 2024-06-08 06:00:00                   85         1010.556        4.440721\n6 2024-06-08 07:00:00                   81         1009.887        3.201562\n  temperature_120m\n1          15.8455\n2          15.5455\n3          16.1455\n4          15.3455\n5          15.2455\n6          15.1455"
  },
  {
    "objectID": "Wind-Energy-Yield-Forecast.html#quarto",
    "href": "Wind-Energy-Yield-Forecast.html#quarto",
    "title": "Wind Power & Energy Yield Forecast",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\n\nsource(\"init.R\")\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\n\nAttaching package: 'kableExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\n\nprint(\"test\")\n\ntest\n\n\n\n# Initialise libraries\n\nimport openmeteo_requests\nimport requests_cache\nimport pandas as pd\nfrom retry_requests import retry\n\n# Setup the Open-Meteo API client with cache and retry on error\ncache_session = requests_cache.CachedSession('.cache', expire_after = 3600)\nretry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)\nopenmeteo = openmeteo_requests.Client(session = retry_session)\n\n# Make sure all required weather variables are listed here\n# The order of variables in hourly or daily is important to assign them correctly below\nurl = \"https://api.open-meteo.com/v1/dwd-icon\"\nparams = {\n    \"latitude\": 52.52,\n    \"longitude\": 13.41,\n    \"hourly\": [\"relative_humidity_2m\", \"surface_pressure\", \"wind_speed_120m\", \"temperature_120m\"],\n    \"wind_speed_unit\": \"ms\",\n    \"timeformat\": \"unixtime\"\n}\nresponses = openmeteo.weather_api(url, params=params)\n\n# Process first location. Add a for-loop for multiple locations or weather models\nresponse = responses[0]\nprint(f\"Coordinates {response.Latitude()}°N {response.Longitude()}°E\")\n\nCoordinates 52.52000045776367°N 13.419998168945312°E\n\nprint(f\"Elevation {response.Elevation()} m asl\")\n\nElevation 38.0 m asl\n\nprint(f\"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}\")\n\nTimezone None None\n\nprint(f\"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s\")\n\nTimezone difference to GMT+0 0 s\n\n\n# Process hourly data. The order of variables needs to be the same as requested.\nhourly = response.Hourly()\nhourly_relative_humidity_2m = hourly.Variables(0).ValuesAsNumpy()\nhourly_surface_pressure = hourly.Variables(1).ValuesAsNumpy()\nhourly_wind_speed_120m = hourly.Variables(2).ValuesAsNumpy()\nhourly_temperature_120m = hourly.Variables(3).ValuesAsNumpy()\n\nhourly_data = {\"date\": pd.date_range(\n    start = pd.to_datetime(hourly.Time(), unit = \"s\", utc = True),\n    end = pd.to_datetime(hourly.TimeEnd(), unit = \"s\", utc = True),\n    freq = pd.Timedelta(seconds = hourly.Interval()),\n    inclusive = \"left\"\n)}\nhourly_data[\"relative_humidity_2m\"] = hourly_relative_humidity_2m\nhourly_data[\"surface_pressure\"] = hourly_surface_pressure\nhourly_data[\"wind_speed_120m\"] = hourly_wind_speed_120m\nhourly_data[\"temperature_120m\"] = hourly_temperature_120m\n\nhourly_dataframe = pd.DataFrame(data = hourly_data)\n# print(hourly_dataframe)\n\n\nhourly_df &lt;- py$hourly_dataframe\n\nhead(hourly_df)\n\n                 date relative_humidity_2m surface_pressure wind_speed_120m\n1 2024-06-08 02:00:00                   87         1011.869        4.004997\n2 2024-06-08 03:00:00                   85         1011.859        4.720170\n3 2024-06-08 04:00:00                   85         1011.652        5.622277\n4 2024-06-08 05:00:00                   88         1011.245        5.560575\n5 2024-06-08 06:00:00                   85         1010.556        4.440721\n6 2024-06-08 07:00:00                   81         1009.887        3.201562\n  temperature_120m\n1          15.8455\n2          15.5455\n3          16.1455\n4          15.3455\n5          15.2455\n6          15.1455"
  }
]